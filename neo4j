// Commands to create records in neo4j

// Select all records
MATCH (n) RETURN n;
------------------------------------------------
// create records
CREATE
  (p1:Person {id: 1, name: "Alice", userId: 101}),
  (p2:Person {id: 2, name: "Bob", userId: 102}),
  (p3:Person {id: 3, name: "Charlie", userId: 103}),
  (p4:Person {id: 4, name: "David", userId: 104}),
  (p5:Person {id: 5, name: "Eve", userId: 105}),
  (p6:Person {id: 6, name: "Frank", userId: 106}),
  (p7:Person {id: 7, name: "Grace", userId: 107}),
  (p8:Person {id: 8, name: "Hank", userId: 108}),
  (p9:Person {id: 9, name: "Ivy", userId: 109}),
  (p10:Person {id: 10, name: "Jack", userId: 110});

--------------------------------------------------------------
/// create connection to every nodes to other and
    MATCH (p1:Person), (p2:Person)
    WHERE p1 <> p2 AND rand() < 0.7
    CREATE (p1)-[:CONNECTED_TO]->(p2);

  MATCH (p1:Person), (p2:Person): Retrieves all pairs of Person nodes.
  WHERE p1 <> p2: Ensures a node doesn't connect to itself.
  rand() < 0.3: Randomly selects 30% of possible connections to avoid a fully connected graph.
  CREATE (p1)-[:CONNECTED_TO]->(p2): Establishes the relationship.

  OR   ----> Make Connection to relationship

  MATCH (frank:Person{name:'Frank'}),(bob:Person{name:'Bob'})
  CREATE (frank)-[:CONNECTED_TO]->(bob);

  MATCH (david:Person {name: 'David'}), (eve:Person {name: 'Eve'})
  CREATE (david)-[:CONNECTED_TO]->(eve);
  MATCH (eve:Person {name: 'Eve'}), (hank:Person {name: 'Hank'})
  CREATE (hank)-[:CONNECTED_TO]->(eve);

  MATCH (eve:Person {name: 'Eve'}), (fank:Person {name: 'Fank'})
  CREATE (fank)-[:CONNECTED_TO]->(eve);



-------------------------------------------------------------------
// Delete all records
MATCH (n) DETACH DELETE n;
-----------------------------------------------------------------
// Fetch records
MATCH (personA:Person)- [r]->(personB:Person)
WHERE personA.name = 'David'
RETURN personB

        ///only one record

    @Query("MATCH (personA:Person) -[:CONNECTED_TO]-> (personB:Person) " +
            "WHERE personA.userId = $userId " +
            "RETURN personB")
    List<Person> getFirstDegreeConnections(Long userId); userId -> David one record fetched

    //all the connected noe from userId
        @Query("MATCH (personA:Person) -[:CONNECTED_TO]- (personB:Person) " +
                "WHERE personA.userId = $userId " +
                "RETURN personB")
        List<Person> getFirstDegreeConnections(Long userId);
        for userId = 4 -> david so many records fetched

        MATCH (personA:Person {name:'David'})- [r]->(personB:Person)
        RETURN personB